"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[636],{4137:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>h});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=c(t),d=o,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return t?r.createElement(h,i(i({ref:n},l),{},{components:t})):r.createElement(h,i({ref:n},l))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[m]="string"==typeof e?e:o,i[1]=p;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9218:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>c});var r=t(7462),o=(t(7294),t(4137));const a={},i="Completions API",p={unversionedId:"raw-api-access/completions",id:"raw-api-access/completions",title:"Completions API",description:"The OpenAI proxy service completion endpoint is a REST API that generates a response to a prompts. Requests are forwarded to the Azure OpenAI service and the response is returned to the caller.",source:"@site/docs/80-raw-api-access/25-completions.md",sourceDirName:"80-raw-api-access",slug:"/raw-api-access/completions",permalink:"/azure-openai-service-proxy/raw-api-access/completions",draft:!1,editUrl:"https://github.com/gloveboxes/azure-openai-service-proxy/tree/master/docs/docs/80-raw-api-access/25-completions.md",tags:[],version:"current",sidebarPosition:25,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chat completions API",permalink:"/azure-openai-service-proxy/raw-api-access/chat-completion"},next:{title:"Embeddings API",permalink:"/azure-openai-service-proxy/raw-api-access/embedding"}},s={},c=[{value:"Using the OpenAI SDK",id:"using-the-openai-sdk",level:2},{value:"OpenAI completions with Curl",id:"openai-completions-with-curl",level:2}],l={toc:c},m="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(m,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"completions-api"},"Completions API"),(0,o.kt)("p",null,"The OpenAI proxy service completion endpoint is a REST API that generates a response to a prompts. Requests are forwarded to the Azure OpenAI service and the response is returned to the caller."),(0,o.kt)("h2",{id:"using-the-openai-sdk"},"Using the OpenAI SDK"),(0,o.kt)("p",null,"The following example is from the ",(0,o.kt)("inlineCode",{parentName:"p"},"src/examples")," folder and demonstrates how to use the OpenAI Python SDK version 1.2.x to access the completions API."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'""" Test completions with openai """\n\nimport os\nfrom dotenv import load_dotenv\nimport openai\n\n\nload_dotenv()\n\nENDPOINT_URL = os.environ.get("PROXY_ENDPOINT_URL")\nAPI_KEY = os.environ.get("API_KEY")\nAPI_VERSION = "2023-09-01-preview"\n\nDEPLOYMENT_NAME = "davinci-002"\nENGINE_NAME = "text-davinci-002-prod"\n\nopenai.api_key = API_KEY\nopenai.api_base = ENDPOINT_URL\n\n\nresponse = openai.Completion.create(\n    engine=ENGINE_NAME, prompt="This is a test", max_tokens=5\n)\n\nprint(response)\n')),(0,o.kt)("h2",{id:"openai-completions-with-curl"},"OpenAI completions with Curl"),(0,o.kt)("p",null,"You can also use ",(0,o.kt)("inlineCode",{parentName:"p"},"cURL")," to access the OpenAI completions API. Remember, the ",(0,o.kt)("inlineCode",{parentName:"p"},"API_KEY")," is the EventCode/GitHubUserName, eg ",(0,o.kt)("inlineCode",{parentName:"p"},"hackathon/gloveboxes"),", and the ",(0,o.kt)("inlineCode",{parentName:"p"},"ENDPOINT_URL")," is proxy url provided by the event administrator."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'curl -X POST \\\n-H "api-key: API_KEY" \\\n-H "Content-Type: application/json" \\\n-d \'{\n    "max_tokens": 256,\n    "temperature": 1,\n    "prompt": "Write a poem about indian elephants"\n}\' \\\nhttps://ENDPOINT_URL/v1/completions\n')),(0,o.kt)("p",null,"or pretty print the JSON response with ",(0,o.kt)("inlineCode",{parentName:"p"},"jq")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'curl -X POST \\\n-H "api-key: API_KEY" \\\n-H "Content-Type: application/json" \\\n-d \'{\n    "max_tokens": 256,\n    "temperature": 1,\n    "prompt": "Write a poem about indian elephants"\n}\' \\\nhttps://ENDPOINT_URL/v1/completions | jq\n')))}u.isMDXComponent=!0}}]);